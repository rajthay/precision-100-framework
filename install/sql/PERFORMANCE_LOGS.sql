DROP TABLE PERFORMANCE_LOGS
/
CREATE TABLE PERFORMANCE_LOGS (
  EXECUTION_NAME VARCHAR2(255),
  UNIT_TYPE VARCHAR2(255),
  UNIT_NAME VARCHAR2(255),
  EVENT_TYPE VARCHAR2(255),
  EVENT_TIME DATE DEFAULT SYSDATE,
  ADDITIONAL_INFO1 VARCHAR2(255),
  ADDITIONAL_INFO2 VARCHAR2(255),
  ADDITIONAL_INFO3 VARCHAR2(255),
  ADDITIONAL_INFO4 VARCHAR2(255), 
  ADDITIONAL_INFO5 VARCHAR2(255)
)
/
CREATE OR REPLACE PACKAGE PERFORMANCE_LOGS_PKG AS

   PROCEDURE LOG(EXECUTION_NAME VARCHAR2, UNIT_TYPE VARCHAR2, UNIT_NAME VARCHAR2, EVENT_TYPE VARCHAR2);

END PERFORMANCE_LOGS_PKG;
/

CREATE OR REPLACE PACKAGE BODY PERFORMANCE_LOGS_PKG AS

   PROCEDURE LOG_INTERNAL(
             P_EXECUTION_NAME VARCHAR2, 
             P_UNIT_TYPE VARCHAR2, 
             P_UNIT_NAME VARCHAR2, 
             P_EVENT_TYPE VARCHAR2, 
             P_ADDITIONAL_INFO1 VARCHAR,
             P_ADDITIONAL_INFO2 VARCHAR,
             P_ADDITIONAL_INFO3 VARCHAR,
             P_ADDITIONAL_INFO4 VARCHAR,
             P_ADDITIONAL_INFO5 VARCHAR             
   ) IS
   BEGIN
      INSERT INTO PERFORMANCE_LOGS (
        EXECUTION_NAME,
        UNIT_TYPE,
        UNIT_NAME,
        EVENT_TYPE, 
        ADDITIONAL_INFO1,
        ADDITIONAL_INFO2,
        ADDITIONAL_INFO3,
        ADDITIONAL_INFO4,
        ADDITIONAL_INFO5
      ) VALUES (
        P_EXECUTION_NAME,
        P_UNIT_TYPE,
        P_UNIT_NAME,
        P_EVENT_TYPE,
        P_ADDITIONAL_INFO1,
        P_ADDITIONAL_INFO2,
        P_ADDITIONAL_INFO3,
        P_ADDITIONAL_INFO4,
        P_ADDITIONAL_INFO5
      );
   END LOG_INTERNAL;

   PROCEDURE LOG(
	     EXECUTION_NAME VARCHAR2, 
	     UNIT_TYPE VARCHAR2, 
	     UNIT_NAME VARCHAR2, 
	     EVENT_TYPE VARCHAR2) IS
   BEGIN
      LOG_INTERNAL(
	P_EXECUTION_NAME => EXECUTION_NAME, 
	P_UNIT_TYPE => UNIT_TYPE, 
	P_UNIT_NAME => UNIT_NAME, 
	P_EVENT_TYPE => EVENT_TYPE, 
	P_ADDITIONAL_INFO1 => NULL,
	P_ADDITIONAL_INFO2 => NULL,
	P_ADDITIONAL_INFO3 => NULL,
	P_ADDITIONAL_INFO4 => NULL,
	P_ADDITIONAL_INFO5 => NULL
      ); 
   END LOG;
   
END PERFORMANCE_LOGS_PKG;
/
